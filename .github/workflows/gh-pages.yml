name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Exclude server-only files from static export
        run: echo "src/app/api/**" > .nextignore

      - name: Build static site
        env:
          GITHUB_PAGES: 'true'
          NEXT_PUBLIC_GITHUB_PAGES: 'true'
          NEXT_PUBLIC_BASE_PATH: '/ThriveCircleNext'
        run: npm run build

      - name: Debug build outputs
        run: |
          ls -la
          echo "--- .next contents ---"
          ls -la .next || true
          echo "--- out contents ---"
          ls -la out || true

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
          name: github-pages-${{ github.run_id }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Clean duplicate artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const run_id = process.env.GITHUB_RUN_ID;
            const name = `github-pages-${run_id}`;
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: parseInt(run_id, 10),
            });
            const matches = data.artifacts.filter(a => a.name === name);
            if (matches.length > 1) {
              matches.sort((a,b)=> new Date(b.created_at) - new Date(a.created_at));
              for (const art of matches.slice(1)) {
                core.info(`Deleting duplicate artifact ${art.id} (${art.name})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: art.id,
                });
              }
            } else {
              core.info(`No duplicate artifacts found for ${name}`);
            }
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}


